
  
 function addGlobalFocusStyles() {
  // Remove any existing style with this ID
  const existingStyle = document.getElementById('custom-focus-styles');
  if (existingStyle) {
    existingStyle.remove();
  }
  
  const style = document.createElement('style');
  style.id = 'custom-focus-styles';
  style.textContent = `
    /* Remove BOTH outline and box-shadow to eliminate blue focus ring completely */
    input:focus, 
    textarea:focus, 
    select:focus,
    input[type="text"]:focus,
    input[type="email"]:focus,
    input[type="password"]:focus,
    input[type="number"]:focus,
    input[type="tel"]:focus,
    input[type="url"]:focus,
    input[type="search"]:focus,
    .w-input:focus,
    .w-select:focus {
      outline: none !important;
      box-shadow: none !important;
      border: 1px solid #ccc !important; /* Keep a subtle border so users know it's focused */
    }
    
    /* Alternative: Custom focus styling (uncomment if you want custom focus instead of none) */
    /*
    input:focus, 
    textarea:focus, 
    select:focus,
    .w-input:focus,
    .w-select:focus {
      outline: none !important;
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25) !important;
      border-color: #007bff !important;
    }
    */
  `;
  
  // Append to head with high priority
  document.head.appendChild(style);
  
  console.log('Global focus styles added - both outline and box-shadow removed');
}

  
function removeFocusOutline(element) {
  element.style.outline = 'none';
  element.style.setProperty('outline', 'none', 'important');
  
  // Optional: Add the same focus styling that Webflow uses
  element.addEventListener('focus', function() {
    this.style.outline = 'none';
    // You can add custom focus styling here if needed
    // this.style.borderColor = '#your-color';
  });
}

/**
 * Remove focus outline from multiple elements at once
 */
function removeFocusOutlineFromContainer(container) {
  const formElements = container.querySelectorAll('input, textarea, select');
  formElements.forEach(element => {
    removeFocusOutline(element);
  });
}
  
  
  //---------
  
  
  
  
  function trackPageLeave(ub_id) {
  // Set up the visibility change listener
  document.addEventListener('visibilitychange', function() {
    if (document.visibilityState === 'hidden') {
      // User has switched away from this tab - call the API
      callPageLeftAPI(ub_id);
    }
  });
  
  // Also track window blur events as a fallback
  window.addEventListener('blur', function() {
    callPageLeftAPI(ub_id);
  });

  /**
   * Makes the actual API call to record the page leave event
   * @param {string} ub_id - The user behavior ID to include in the API call
   */
  function callPageLeftAPI(ub_id) {
    // Set up the API endpoint with the query parameter
    const apiUrl = `https://xxye-mqg7-lvux.n7d.xano.io/api:DwPBcTo5/page_left?ub_id=${ub_id}`;
    
    // Use the Fetch API to make the request
    fetch(apiUrl, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      if (!response.ok) {
        console.error('API call failed:', response.status, response.statusText);
      }
      return response.json();
    })
    .then(data => {
      console.log('Page leave tracked successfully:', data);
    })
    .catch(error => {
      console.error('Error tracking page leave:', error);
      
      // Optional: Use navigator.sendBeacon as a fallback for more reliability
      // during page unload events
      if (navigator.sendBeacon) {
        navigator.sendBeacon(apiUrl);
      }
    });
  }
}
  
  
  
  function createAIContentContainer(body) {
  const container = document.createElement('div');
  container.className = 'ai_content_container';
  const bubble = document.createElement('div');
  bubble.className = 'ai_bubble';
  
  // Create the content element
  const contentElement = document.createElement('div');
  // Use Webflow's rich text block class instead
  contentElement.className = 'ai_text w-richtext';
  
  // Parse markdown to HTML using marked library
  try {
    // Check if marked is available
    if (typeof marked !== 'undefined') {
      // Configure marked with needed options
      marked.setOptions({
        breaks: true, // Converts line breaks to <br>
        gfm: true,    // GitHub Flavored Markdown
        sanitize: false // Allow HTML in the markdown
      });
      
      // Convert markdown to HTML
      contentElement.innerHTML = marked.parse(body);
      
      // Add syntax highlighting if available
      if (typeof Prism !== 'undefined') {
        document.querySelectorAll('pre code').forEach((block) => {
          Prism.highlightElement(block);
        });
      }
    } else {
      // Fallback if marked isn't available
      console.warn('Marked library not loaded, displaying plain text');
      contentElement.textContent = body;
    }
  } catch (error) {
    console.error('Error parsing markdown:', error);
    // Fallback to plain text if parsing fails
    contentElement.textContent = body;
  }
  
  // Append elements to the bubble
  bubble.appendChild(contentElement);
  
  // Append bubble to container, and container to main container
  container.appendChild(bubble);
  mainContainer.appendChild(container);
  
  // Handle code blocks with syntax highlighting
  setupCodeBlocks(container);
}

// Helper function to set up code blocks with proper styling
function setupCodeBlocks(container) {
  // Find all code blocks in the container
  const codeBlocks = container.querySelectorAll('pre code');
  
  codeBlocks.forEach(codeBlock => {
    // Create a copy button for each code block
    const copyButton = document.createElement('button');
    copyButton.className = 'copy-code-button';
    copyButton.textContent = 'Copy';
    
    // You can add Webflow classes to the button if needed
    // copyButton.classList.add('w-button', 'your-webflow-button-class');
    
    // Position the copy button
    const pre = codeBlock.parentNode;
    pre.style.position = 'relative';
    pre.appendChild(copyButton);
    
    // Add copy functionality
    copyButton.addEventListener('click', () => {
      const code = codeBlock.textContent;
      navigator.clipboard.writeText(code).then(() => {
        copyButton.textContent = 'Copied!';
        setTimeout(() => {
          copyButton.textContent = 'Copy';
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy code:', err);
        copyButton.textContent = 'Error!';
        setTimeout(() => {
          copyButton.textContent = 'Copy';
        }, 2000);
      });
    });
  });
}
  
  
  
  
function autoResizeTextarea(textarea) {
  // Preserve the current width
  const currentWidth = textarea.style.width || getComputedStyle(textarea).width;
  
  // Reset height to ensure we get the correct scrollHeight
  textarea.style.height = 'auto';
  
  // Set the height to match content (scrollHeight includes padding but not border)
  textarea.style.height = textarea.scrollHeight + 'px';
  
  // Ensure width remains unchanged
  if (currentWidth && textarea.style.width !== currentWidth) {
    textarea.style.width = currentWidth;
  }
}

  
  
/**
 * Initialize auto-resize for a textarea
 * @param {HTMLTextAreaElement} textarea - The textarea to initialize with auto-resize
 */
 
function initAutoResize(textarea) {
  // Set initial height
  autoResizeTextarea(textarea);
  
  // Add event listeners for content changes
  textarea.addEventListener('input', function() {
    autoResizeTextarea(this);
  });
  
  // Also handle programmatic changes
  textarea.addEventListener('change', function() {
    autoResizeTextarea(this);
  });
}

/**
 * Apply auto-resize to all textareas in a container
 * @param {HTMLElement} container - The container element to search for textareas
 */
function initAllTextareas(container) {
  const textareas = container.querySelectorAll('textarea');
  textareas.forEach(textarea => {
    initAutoResize(textarea);
  });
}
  
  
  
function trimText(text, n) {
  if (!text || text.length <= n) {
    return text;
  }
  return text.substring(0, n) + '...';
}  
  

/**
 * Fetches cover images from the API and returns a random image URL
 * @returns {Promise<string>} A promise that resolves to a random image URL
 */
async function getRandomCoverImageUrl() {
  try {
    
    
    // Make the API call with type parameter set to "cover"
    const response = await fetch('https://xxye-mqg7-lvux.n7d.xano.io/api:DwPBcTo5/images?type=cover', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        
      }
    });

    // Log the response for debugging
    console.log("Image API response status:", response.status);
    
    if (!response.ok) {
      console.error(`API error: ${response.status} ${response.statusText}`);
      return 'https://cdn.prod.website-files.com/6640b571ca9d09ecfa2c2de6/67c84519dfe44ecc9a535cc3_Course%20Cover%2035.svg';
    }

    // Parse the JSON response
    const data = await response.json();
    console.log("Image API response data:", data);
    
    // Validate that we have images in the response
    if (!Array.isArray(data) || data.length === 0) {
      console.warn('No images returned from API, using default image');
      return 'https://cdn.prod.website-files.com/6640b571ca9d09ecfa2c2de6/67c84519dfe44ecc9a535cc3_Course%20Cover%2035.svg';
    }
    
    // Extract all image URLs from the nested structure
    const imageUrls = data.map(item => {
      if (item && item.image && item.image.url) {
        return item.image.url;
      }
      return null;
    }).filter(url => url !== null);
    
    console.log("Extracted image URLs:", imageUrls);
    
    // If no valid URLs were found, return default
    if (imageUrls.length === 0) {
      console.warn('No valid image URLs found in the response');
      return 'https://cdn.prod.website-files.com/6640b571ca9d09ecfa2c2de6/67c84519dfe44ecc9a535cc3_Course%20Cover%2035.svg';
    }
    
    // Return a random image URL
    const randomIndex = Math.floor(Math.random() * imageUrls.length);
    const selectedUrl = imageUrls[randomIndex];
    console.log("Selected image URL:", selectedUrl);
    return selectedUrl;
    
  } catch (error) {
    console.error('Error fetching random image:', error);
    // Return a default image URL in case of error
    return 'https://cdn.prod.website-files.com/6640b571ca9d09ecfa2c2de6/67c84519dfe44ecc9a535cc3_Course%20Cover%2035.svg';
  }
}

  
  
  async function verifyTeacherPermissions(user_id, course_id){
  	
  	const course = await fetch(`https://xxye-mqg7-lvux.n7d.xano.io/api:DwPBcTo5/course/${course_id}`);
    if (user_id !== course.user_id){
      alert("You don't have the rights to view this page");
      window.location.href = '/';
    }
  }
  
  
  

  
  
function createUserMessage(container, text, time) {
  // Create main container for user message
  const userContainer = document.createElement('div');
  userContainer.className = 'user_content_container';
  
  // Create footnote with role and time
  const footnote = document.createElement('div');
  footnote.className = 'bubble-footnote';
  footnote.textContent = `role: user. time: ${time}`;
  
  // Create user bubble for message content
  const userBubble = document.createElement('div');
  userBubble.className = 'user_bubble';
  userBubble.textContent = text;
  
  // Assemble the message structure
  userContainer.appendChild(footnote);
  userContainer.appendChild(userBubble);
  
  // Add to main container
  container.appendChild(userContainer);
}


function createAssistantMessage(container, text, time) {
  // Create main container for assistant message
  const aiContainer = document.createElement('div');
  aiContainer.className = 'ai_content_container';
  
  // Create footnote with role and time
  const footnote = document.createElement('div');
  footnote.className = 'bubble-footnote';
  footnote.textContent = `role: assistant. time: ${time}`;
  
  // Create AI bubble for message content
  const aiBubble = document.createElement('div');
  aiBubble.className = 'ai_bubble';
  
  // Create text element inside AI bubble
  const aiText = document.createElement('div');
  aiText.className = 'ai_text';
  aiText.textContent = text;
  
  // Assemble the message structure
  aiBubble.appendChild(aiText);
  aiContainer.appendChild(footnote);
  aiContainer.appendChild(aiBubble);
  
  // Add to main container
  container.appendChild(aiContainer);
}
  
  
  
  
  
  
  
async function fetchDataFromApi(endpoint, params = {}, authToken = null, method = "GET") {
    const queryString = new URLSearchParams(params).toString();
    const url = `${endpoint}?${queryString}`;

    const headers = {
        "Content-Type": "application/json",
    };

    if (authToken) {
        headers["Authorization"] = `Bearer ${authToken}`;
    }

    try {
        const response = await fetch(url, {
            method: method,
            headers: headers,
        });

        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }

        const data = await response.json();
        console.log("Data received:", data);
        return data;
    } catch (error) {
        console.error("Error fetching data:", error);
        throw error;
    }
}

async function postDataToApi(endpoint, data = {}, authToken = null) {
    const headers = {
        'Content-Type': 'application/json',
    };

    if (authToken) {
        headers['Authorization'] = `Bearer ${authToken}`;
    }

    try {
        const response = await fetch(endpoint, {
            method: 'POST',
            headers,
            body: JSON.stringify(data),
        });

        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }

        return await response.json();
    } catch (error) {
        console.error('Error sending POST request:', error);
        throw error;
    }
}


async function setElementNames({ course_id, lesson_id, block_id, user_id }) {
  // Text trimming function
  function trimText(text, n) {
    if (!text || text.length <= n) {
      return text;
    }
    return text.substring(0, n) + '...';
  }

  // Define API endpoints and corresponding element IDs
  const apiEndpoints = {
    course: (id) => `https://xxye-mqg7-lvux.n7d.xano.io/api:DwPBcTo5/course/${id}`,
    lesson: (id) => `https://xxye-mqg7-lvux.n7d.xano.io/api:DwPBcTo5/lesson/${id}`,
    block: (id) => `https://xxye-mqg7-lvux.n7d.xano.io/api:DwPBcTo5/block/${id}`,
    user: (id) => `https://xxye-mqg7-lvux.n7d.xano.io/api:DwPBcTo5/user/${id}`
  };
  
  const elementIds = {
    course: 'course-name',
    lesson: 'lesson-name',
    block: 'block-name',
    user: 'user-name'
  };

  // Define max lengths for each element type
  const maxLengths = {
    course: 20,
    lesson: 20,
    block: 20,
    user: 20
  };

  // Helper function to fetch data from an API
  const fetchData = async (url) => {
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error(`Error fetching data from ${url}:`, error);
      return null; // Return null to avoid breaking execution
    }
  };

  // Parameters to process
  const params = { course: course_id, lesson: lesson_id, block: block_id, user: user_id };
  
  // Loop through each parameter and process
  for (const [key, id] of Object.entries(params)) {
    if (id) {
      // Construct API URL and fetch data
      const url = apiEndpoints[key](id);
      const data = await fetchData(url);
      if (data && data.name) {
        // Find the corresponding DOM element
        const element = document.getElementById(elementIds[key]);
        if (element) {
          // Set the innerText to the trimmed fetched name
          const trimmedName = trimText(data.name, maxLengths[key]);
          element.innerText = trimmedName;
          console.log('set element names: ', key, ': ', trimmedName);
        } else {
          console.warn(`Element with ID "${elementIds[key]}" not found.`);
        }
      } else {
        console.warn(`Failed to retrieve name for ${key} with ID ${id}.`);
      }
    }
  }

  // Add event listener for the home button
  document.getElementById('home-button')?.addEventListener('click', () => {
    window.location.href = `/`;
  });
  
  // Add event listener for the back button
  document.getElementById('back-button')?.addEventListener('click', () => {
    window.history.back();
  });
  
  
}


  // Function to get URL parameters
    function getUrlParameters(name) {
    const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    const results = regex.exec(location.search);
    return results ? decodeURIComponent(results[1].replace(/\+/g, ' ')) : null;
    }

  
  
function parseEmailList(emailString) {
    const emailArray = emailString.split(',').map(email => email.trim());
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Basic email validation regex
    const invalidEmails = emailArray.filter(email => !emailRegex.test(email));

    if (invalidEmails.length > 0) {
        return { error: "Invalid email format", invalidEmails };
    }
	console.log('Email json', emailArray);
    return { emails: emailArray };
}


  
function setTeacherCourseMenu(course_id) {
        document.getElementById('progress-menu')?.addEventListener('click', () => {
            window.location.href = `/teacher/course-progress?course_id=${course_id}`;
        });

        document.getElementById('content-menu')?.addEventListener('click', () => {
            window.location.href = `/teacher/course-content?course_id=${course_id}`;
        });
  
  		document.getElementById('testing-menu')?.addEventListener('click', () => {
          	console.log('testing clicked!');
            window.location.href = `/teacher/course-testing?course_id=${course_id}`;
        });

        document.getElementById('students-menu')?.addEventListener('click', () => {
          console.log('students clicked!');
            window.location.href = `/teacher/course-students?course_id=${course_id}`;
        });
  		document.getElementById('settings-menu')?.addEventListener('click', () => {
            window.location.href = `/teacher/course-settings?course_id=${course_id}`;
        });
    }  
  

